{"version":3,"sources":["core/App.module.scss","common/components/ImageUploader/ImageUploader.module.scss","common/components/ConfidenceRater/ConfidenceRater.module.scss","common/components/Tooltip/Tooltip.module.scss","common/components/CaptionField/CaptionField.module.scss","common/components/Button/Button.js","common/components/CaptionBlock/CaptionBlock.js","common/components/CaptionField/CaptionField.js","common/components/ConfidenceRater/ConfidenceRater.js","common/components/Heading/Heading.js","common/components/ImageUploader/ImageUploader.js","common/components/Tooltip/Tooltip.js","core/App.js","serviceWorker.js","index.js"],"names":["module","exports","Button","children","rest","CaptionBlock","title","caption","score","level","defaultProps","CaptionField","id","useState","copySuccess","setCopySuccess","textAreaRef","useRef","htmlFor","className","styles","captionField","name","cols","rows","ref","defaultValue","document","queryCommandSupported","onClick","e","current","select","execCommand","target","focus","setTimeout","disabled","undefined","length","hasCaption","ConfidenceRater","tabIndex","confidenceRater__emojis","role","aria-label","Heading","props","HeadingTag","appearance","REACT_APP_API_KEY","process","Apikey","cloudmersiveImageApiClient","ApiClient","instance","authentications","ImageUploader","state","uploadLabel","imagePreviewURL","rawFile","hasImage","fileSize","rawFileSize","sizeLimit","errorMsg","postImageToApi","apiKey","api","RecognizeApi","getResponse","recognizeDescribe","error","data","res","console","text","log","body","handleSubmit","preventDefault","handleImageChange","reader","FileReader","files","onloadend","setState","result","convertBytes","size","readAsDataURL","handleReset","reset","getElementById","bytes","i","parseInt","Math","floor","round","pow","$imagePreview","this","imageContainer","src","alt","imageUploader__container","onSubmit","type","accept","onChange","imageUploader__fileSize","imageUploader__reset","imageUploader__errorMsg","aria-live","Component","Tooltip","tooltipClassName","classNames","tooltip","App","subtitle","firstCaption","secondCaption","obj","BestOutcome","RunnerUpOutcome","resetState","bool","App__header","App__title","App__subtitle","App__description","App__fineprint","href","rel","Description","ConfidenceScore","App__footer","Date","getFullYear","App__socialList","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c1f1716b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__2tT8O\",\"App-header\":\"App_App-header__FsUJc\",\"App-logo\":\"App_App-logo__2Xmra\",\"App-link\":\"App_App-link__20ziW\",\"App-grid\":\"App_App-grid__3BCDD\",\"App-column\":\"App_App-column__3I1pP\",\"App__title\":\"App_App__title__1rVM1\",\"App__subtitle\":\"App_App__subtitle__2JqCe\",\"App__description\":\"App_App__description__1K-0T\",\"App__fineprint\":\"App_App__fineprint__tYyKl\",\"App__header\":\"App_App__header__ppZ3O\",\"App__footer\":\"App_App__footer__G7p65\",\"App__socialList\":\"App_App__socialList__zIRdo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"imageUploader__container\":\"ImageUploader_imageUploader__container__3aaKl\",\"imageUploader__fileSize\":\"ImageUploader_imageUploader__fileSize__3548o\",\"imageUploader__errorMsg\":\"ImageUploader_imageUploader__errorMsg__1sRoh\",\"imageUploader__reset\":\"ImageUploader_imageUploader__reset__3DSKf\",\"imageContainer\":\"ImageUploader_imageContainer__1eSlW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"confidenceRater__emojis\":\"ConfidenceRater_confidenceRater__emojis__1tGPy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tooltip\":\"Tooltip_tooltip__2Mae-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"captionField\":\"CaptionField_captionField__37BJZ\"};","import React from 'react'\nimport PropTypes from 'prop-types'\n\nexport const Button = ({ children, ...rest }) => (\n  <button {...rest}>{ children }</button>\n)\n\nButton.propTypes = {\n  children: PropTypes.node.isRequired\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport { Heading, CaptionField, ConfidenceRater } from '../../components'\n\nexport const CaptionBlock = ({ title, caption, score }) => {\n  return (\n    <div>\n      { title && <Heading level={2}>{ title }</Heading> }\n      <ConfidenceRater score={score} />\n      <CaptionField caption={caption} />\n    </div>\n  )\n}\n\nCaptionBlock.propTypes = {\n  title: PropTypes.string,\n  caption: PropTypes.string.isRequired\n}\n\nCaptionBlock.defaultProps = {\n  caption: ''\n}\n","import React, { useState, useRef } from 'react'\nimport PropTypes from 'prop-types'\n\nimport { Button, Tooltip } from '../../components'\n\nimport styles from './CaptionField.module.scss'\n\nexport const CaptionField = ({ id, caption }) => {\n  const [copySuccess, setCopySuccess] = useState('')\n  const textAreaRef = useRef(null)\n\n  const hasCaption = (caption) => {\n    return caption.length !== undefined && caption.length > 0 ? true : false\n  }\n\n  const copyToClipboard = e => {\n    textAreaRef.current.select()\n    document.execCommand('copy')\n    e.target.focus()\n    setCopySuccess('Copied!')\n\n    setTimeout(() => {\n      setCopySuccess('')\n    }, 1000)\n  }\n\n  return (\n    <>\n      <label htmlFor={id} className={styles.captionField}>\n        <span className=\"visually-hidden\">Generated caption: {caption}</span>\n        <textarea name=\"\"\n          id={id}\n          cols=\"30\"\n          rows=\"3\"\n          ref={textAreaRef}\n          defaultValue={caption}\n        />\n      </label>\n\n      { document.queryCommandSupported('copy') && <div>\n        <Button onClick={copyToClipboard} disabled={!hasCaption(caption)}>Copy to clipboard</Button>\n        <Tooltip className={copySuccess ? 'fadein' : 'fadeout'}>Copied!</Tooltip>\n      </div> }\n    </>\n  )\n}\n\nCaptionField.propTypes = {\n  caption: PropTypes.string.isRequired\n}\n\nCaptionField.defaultProps = {\n  caption: ''\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport styles from './ConfidenceRater.module.scss'\n\nexport const ConfidenceRater = ({ score }) => {\n  return (\n    <>\n      <div>\n        <p tabIndex={0}>{score && 'Confidence Score: '}\n          {score <= 0.25 && <span>\n            <span className={styles.confidenceRater__emojis}\n              role='img' \n              aria-label='Less than 25% confidence for caption accuracy. Represented by a sad face emoji and thumbsdown emoji.'>😣👎 </span> \n            Less than 25%</span> }\n          {score > 0.25 && score <= 0.5 && <span>\n            <span className={styles.confidenceRater__emojis}\n              role='img' \n              aria-label='Shrug emoji. About 50% confidence for caption accuracy.'>🤷‍♀️ </span>\n            feeling 50/50.</span> }\n          {score > 0.5 && score <= 0.75 && <span>\n            <span className={styles.confidenceRater__emojis}\n              role='img' \n              aria-label='Thumbs up. About 75% confidence for caption accuracy.'>👍 </span>\n            pretty confident about this.</span> }\n          {score > 0.75 && <span>\n            <span className={styles.confidenceRater__emojis}\n              role='img' \n              aria-label='Awesomeee. High confidence for caption accuracy.'>🤩💯 </span>\n            definitely use this caption!</span>}\n        </p>\n      </div>\n    </>\n  )\n}\n\n\nConfidenceRater.propTypes = {\n  score: PropTypes.number\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nexport const Heading = props => {\n  const HeadingTag = `h${props.level}`\n  const id = props.id\n  let className = props.appearance ? `t${props.appearance}` : ''\n\n  if (props.className) {\n    className += ` ${props.className}`\n  }\n\n  return (\n    <HeadingTag className={className} id={id}>\n      { props.children }\n    </HeadingTag>\n  )\n}\n\nHeading.propTypes = {\n  children: PropTypes.node.isRequired\n}\n\nHeading.defaultProps = {\n  level: 2\n}\n","/* globals cloudmersiveImageApiClient */\n\nimport React, { Component } from 'react'\n\nimport { Button } from '../../components'\n\nimport styles from './ImageUploader.module.scss'\n\nconst { REACT_APP_API_KEY } = process.env\nconst apiClient = cloudmersiveImageApiClient.ApiClient.instance\nconst Apikey = apiClient.authentications['Apikey']\n\nclass ImageUploader extends Component {\n  state = {\n    uploadLabel: 'Upload an image!',\n    imagePreviewURL: '',\n    rawFile: '',\n    hasImage: false,\n    fileSize: '',\n    rawFileSize: 0,\n    sizeLimit: 4000000,\n    errorMsg: 'This image exceeds the max file size of 4MB. Please choose a smaller image 🙏~'\n  }\n\n  postImageToApi = () => {\n    Apikey.apiKey = REACT_APP_API_KEY\n    const api = new cloudmersiveImageApiClient.RecognizeApi()\n    const { rawFile } = this.state\n    const {\n      getResponse\n    } = this.props\n\n    const callback = function (error, data, res) {\n      if (error) {\n        console.error(error, res.text)\n      } else {\n        console.log('API called successfully.')\n        getResponse(res.body)\n      }\n    }\n\n    api.recognizeDescribe(rawFile, callback)\n  }\n\n  handleSubmit = e => {\n    e.preventDefault()\n    this.postImageToApi()\n  }\n\n  handleImageChange = e => {\n    e.preventDefault()\n    const {\n      hasImage\n    } = this.props\n    let reader = new FileReader()\n    let rawFile = e.target.files[0]\n\n    reader.onloadend = () => {\n      this.setState({\n        rawFile,\n        imagePreviewURL: reader.result,\n        hasImage: true,\n        fileSize: `${this.convertBytes(rawFile.size)}`,\n        rawFileSize: rawFile.size\n      })\n\n      hasImage(true)\n    }\n\n    reader.readAsDataURL(rawFile)\n  }\n\n  handleReset = () => {\n    const {\n      reset,\n      hasImage\n    } = this.props\n    const form = document.getElementById('imageForm')\n    form.reset()\n\n    this.setState({\n      imagePreviewURL: '',\n      rawFile: '',\n      hasImage: false,\n      fileSize: '',\n      rawFileSize: 0,\n    })\n\n    // this needs to trigger a callback that clears state in the App\n    reset()\n    hasImage(false)\n  }\n\n  convertBytes = (bytes) => {\n    // taken from https://stackoverflow.com/questions/15900485/correct-way-to-convert-size-in-bytes-to-kb-mb-gb-in-javascript\n\n    const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB']\n    if (bytes === 0) return '0 Byte'\n\n    const i = parseInt(Math.floor(Math.log(bytes) / Math.log(1024)))\n    return Math.round(bytes / Math.pow(1024, i), 2) + ' ' + sizes[i]\n  }\n\n  render() {\n    let {\n      imagePreviewURL,\n      uploadLabel,\n      hasImage,\n      fileSize,\n      rawFileSize,\n      sizeLimit,\n      errorMsg\n    } = this.state\n    let $imagePreview\n\n    if (imagePreviewURL) {\n      $imagePreview = (<div className={styles.imageContainer}>\n        <img src={imagePreviewURL} \n          alt='Preview of uploaded file' \n          title='Preview of uploaded file'\n        />\n      </div>)\n    }\n\n    return (\n      <>\n        <div className={styles.imageUploader__container}>\n          <form id='imageForm' onSubmit={this.handleSubmit}>\n            <input type='file'\n              id='imageFile'\n              name='imageFile'\n              accept='image/png, image/jpeg'\n              onChange={this.handleImageChange}\n              className={'visually-hidden'}\n            />\n            {!hasImage && <label htmlFor='imageFile' className={'button'}>{uploadLabel}</label>}\n\n            {hasImage && rawFileSize <= sizeLimit && <Button type={'submit'}>Generate <span className={'visually-hidden'}>your</span> Caption!</Button>}\n\n            {rawFileSize > sizeLimit && <span className={styles.imageUploader__fileSize}\n              aria-label={`The file size of this image is ${fileSize}.`}\n            >{fileSize}</span>}\n          </form>\n\n          {hasImage && <Button className={styles.imageUploader__reset}\n            onClick={this.handleReset}\n            aria-label={'Reset the app to upload a different image.'}>\n            Reset!\n          </Button>}\n        </div>\n\n        {rawFileSize > sizeLimit && <span role={'alert'}\n          className={styles.imageUploader__errorMsg}\n          aria-live={'assertive'}\n        >{errorMsg}</span>}\n\n        { $imagePreview }\n      </>\n    )\n  }\n}\n\nexport default ImageUploader\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport styles from './Tooltip.module.scss'\n\nexport const Tooltip = ({ children, ...rest }) => {\n  const tooltipClassName = classNames(styles.tooltip, rest.className)\n\n  return (\n    <div className={tooltipClassName}>\n      <span role={'alert'}\n        className={styles['tooltip-text']}\n        aria-live={'assertive'}\n        aria-label={'The generated caption has been copied to your clipboard.'}\n      >{children}</span>\n    </div>\n  )\n}\n\nTooltip.propTypes = {\n  children: PropTypes.string.isRequired\n}\n","import React, { Component } from 'react'\n\nimport styles from './App.module.scss'\n\n// Custom Components\nimport {\n  Heading,\n  CaptionBlock\n} from '../common/components'\n\nimport ImageUploader from '../common/components/ImageUploader/ImageUploader'\n\n// ConfidenceRater (from the API - confidence % of AI & the caption it generated)\n// ResetButton (reset uploaded file and generated captions)\n// ProgressBar (when caption is being generated)\n\nclass App extends Component {\n  state = {\n    title: 'Generate',\n    subtitle: 'Alt Text!',\n    hasImage: false,\n    firstCaption: {},\n    secondCaption: {}\n  }\n\n  getResponse = (obj) => {\n    this.setState({\n      firstCaption: obj.BestOutcome,\n      secondCaption: obj.RunnerUpOutcome\n    })\n  }\n\n  resetState = () => {\n    this.setState({\n      firstCaption: {},\n      secondCaption: {}\n    })\n  }\n\n  hasImage = (bool) => {\n    this.setState({ hasImage: bool })\n  }\n\n  render() {\n    const {\n      firstCaption,\n      secondCaption,\n      title,\n      subtitle,\n      hasImage\n    } = this.state\n\n    return (\n      <main className={styles.App}>\n        <header className={styles.App__header}>\n          <Heading level={1} className={styles.App__title}>{title} <span className={styles.App__subtitle}>{subtitle}</span></Heading>\n          {!hasImage && <p className={styles.App__description}>Having writers block? Can't seem to come up with alt text for your image? Let 'Generate Alt Text!' do the work for you! This generator uses Cloudmersive's Image Descriptions and Captioning API, to generate a one sentence caption for any uploaded image.</p>}\n          <span className={styles.App__fineprint}>Powered by <a href=\"//api.cloudmersive.com/docs/image.asp\" target=\"_blank\" rel=\"noopener noreferrer\">Cloudmersive's Image Processing API</a></span>\n        </header>\n\n        <div className={styles['App-grid']}>\n          <div className={styles['App-column']}>\n            <ImageUploader hasImage={this.hasImage}\n              getResponse={this.getResponse} \n              reset={this.resetState} />\n          </div>\n\n          <div className={styles['App-column']}>\n            <CaptionBlock title={'First Caption'}\n              caption={firstCaption.Description}\n              score={firstCaption.ConfidenceScore}\n            />\n            <CaptionBlock title={'Second Caption'}\n              caption={secondCaption.Description}\n              score={secondCaption.ConfidenceScore}\n            />\n          </div>\n        </div>\n\n        <footer className={styles.App__footer}>\n          <span>&copy; { new Date().getFullYear() } <a href=\"http://hellomkreyes.com/\" target=\"_blank\" rel=\"noopener noreferrer\">M.K. Reyes</a></span>\n          <ul className={styles.App__socialList}>\n            <li>\n              <a href=\"//github.com/hellomkreyes\" target=\"_blank\" rel=\"noopener noreferrer\" aria-label=\"Visit my Github profile.\">\n                <i className=\"fab fa-github-alt\"></i>\n              </a>\n            </li>\n            <li>\n              <a href=\"//www.linkedin.com/in/mkreyes/\" target=\"_blank\" rel=\"noopener noreferrer\" aria-label=\"Visit my LinkedIn profile.\">\n                <i className=\"fab fa-linkedin-in\"></i>\n              </a>\n            </li>\n            <li>\n              <a href=\"//codepen.io/hellomkreyes\" target=\"_blank\" rel=\"noopener noreferrer\" aria-label=\"Visit my codepen!\">\n                <i className=\"fab fa-codepen\"></i>\n              </a>\n            </li>\n          </ul>\n        </footer>\n      </main>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\n// import './index.css'\nimport './common/styles/index.scss'\n\nimport App from './core/App'\n\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}